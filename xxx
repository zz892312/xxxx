name: Test OpenShift Pod Runner

on:
  push:
    branches:
      - main

jobs:
  test-openshift-action:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Use OpenShift Pod Runner
        uses: organization/my-openshift-action@v1
        with:
          image_name: 'my-image:latest'
          oc_parameters: 'ENV=production,DEBUG=true'
          command: 'echo "Hello from inside the pod!"'
        env:
          OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
          OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}


Personal Goals

Enhance Sprint Planning & Scrum Master Role

Improve team coordination by refining sprint planning and backlog grooming processes.

Facilitate efficient team sync up, retrospectives, and sprint reviews to ensure alignment.

Act as a bridge between development and operations to improve communication and workflow.

Lead DevOps Initiatives

Take ownership of DevOps tasks by ensuring timely follow-ups, tracking progress, and providing technical solutions.

Improve cross-team collaboration by maintaining clear communication channels.

Identify and implement DevOps best practices to streamline workflows and enhance automation.

Expand MLOps Experience (If Time Permits)

Gain exposure to AI farm infrastructure tasks to deepen knowledge in MLOps.

Assist in infrastructure-related AI/ML initiatives where feasible while balancing DevOps priorities.

Team Goals

AI Farm Automation

Support automation efforts for AI farm deployments.

Develop deployment automation templates to streamline onboarding and deployment after new clusters go live.

Compliance Enforcement

Align with RBC’s latest compliance policies by incorporating updated gating steps.

Collaborate with software engineers and researchers to instill good compliance practices in the development lifecycle.

Jenkins Deprecation & Migration

Address outstanding infrastructure and DevOps tasks related to Jenkins migration.

Transition Jenkins pipelines (Jenkinsfiles) to GitHub Actions (GHA).

Migrate GPU-based Jenkins agents and jobs to GHA for better resource utilization and maintainability.

UCD Deprecation & Helios Migration

Partner with the development team to establish a structured approach for migrating Borealis applications.

Transition legacy deployment processes from UCD to Helios to ensure a more modern, scalable deployment strategy.

Documentation & Automation

Improve DevOps documentation to enhance onboarding and knowledge sharing.

Automate manual efforts related to app code configuration and deployment processes, time permitting.

Ensure best practices and documentation are available for new team members and cross-team collaboration.



gh run view <run_id> --log --repo OWNER/REPO | tee workflow.log


MESSAGE=$(echo '${{ needs.generate-message.outputs.message }}' | jq -Rs '.' | sed 's/\\n/\\\\n/g')


  send-to-slack:
    needs: generate-message
    runs-on: ubuntu-latest
    steps:
      - name: Format Multi-line Message for Slack
        run: |
          MESSAGE=$(echo '${{ needs.generate-message.outputs.message }}' | jq -Rs '.')
          echo "{ \"channel\": \"#your-channel\", \"text\": $MESSAGE }" > slack_payload.json
        shell: bash

      - name: Send Slack Notification (v2.0.0)
        uses: slackapi/slack-github-action@v2.0.0
        with:
          payload-file-path: ./slack_payload.json
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}





Non-ML CI/CD Debugging Questions
1. GitHub Actions: Debugging a Failing Workflow
Scenario:
Your team uses GitHub Actions to automate testing and deployments. A recent push to the main branch triggered the following error:

bash
Copy
Edit
Error: Process completed with exit code 1.
The remote server returned an error: (403) Forbidden.
Your .github/workflows/deploy.yml includes:

yaml
Copy
Edit
- name: Deploy to Production
  run: curl -X POST -H "Authorization: Bearer ${{ secrets.DEPLOY_TOKEN }}" \
       -d '{}' https://deployment.example.com/api/v1/deploy
Debugging Questions:
What could cause a 403 Forbidden error when making this API request?
How would you verify that secrets.DEPLOY_TOKEN is being passed correctly?
If the API recently changed authentication methods, how would you update the workflow to support it?






2. GitHub Actions Multi-Branch Pipeline Failure
Scenario:
Your team uses GitHub Actions to automate testing and deployments for a microservice. The workflow runs successfully on feature branches and pull requests, but fails on the develop branch with the error:

bash
Copy
Edit
Error: Unable to resolve action 'actions/setup-node@v3', repository not found.
Your .github/workflows/build.yml includes:

yaml
Copy
Edit
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install dependencies
        run: npm install
Debugging Questions:
The error suggests that GitHub Actions can't find actions/setup-node@v3. What are some possible causes for this, and how would you check?
This issue only happens on the develop branch. What branch-specific settings or permissions would you investigate?
How would you confirm whether the issue is due to GitHub Actions service downtime or a repository permission issue?
If this workflow was working previously but recently started failing, what recent changes (in GitHub Actions, the repo, or dependencies) would you check?
If the organization has a self-hosted runner, how would you determine whether the failure is due to network restrictions, cached dependencies, or incorrect runner configuration?




1. Common Development Environment Build Debugging
Scenario:
You're setting up a Python development environment for a new project, but developers report issues when running the setup.

Problem:
After running:

bash
Copy
Edit
pip install -r requirements.txt
They get:

bash
Copy
Edit
ERROR: Could not find a version that satisfies the requirement tensorflow==2.8.0 (from versions: 1.15.0, 2.0.0, 2.7.0)
ERROR: No matching distribution found for tensorflow==2.8.0
Additionally, some users report that their virtual environment isn't activating properly:

bash
Copy
Edit
source venv/bin/activate
-bash: venv/bin/activate: No such file or directory
On Windows machines, they see:

bash
Copy
Edit
venv\Scripts\activate : File cannot be loaded because running scripts is disabled on this system.
Debugging Questions:
What could be causing the TensorFlow version compatibility issue, and how would you resolve it?
The virtual environment is failing to activate. How would you troubleshoot this on Linux/macOS vs. Windows?
On Windows, PowerShell is blocking script execution. How would you fix this, and is it safe to modify execution policies?
If different developers are experiencing different issues, what steps would you take to standardize the development setup across all machines?
If a developer is running into this issue inside a Docker container, how would your debugging approach change?



2. Jenkins Multi-Branch Pipeline Failing Due to Misconfigured Agent
Scenario:
Your team maintains a multi-branch Jenkins pipeline that builds and deploys a microservice. Developers report that PR builds work fine, but the develop branch fails with:

bash
Copy
Edit
hudson.remoting.ChannelClosedException: Channel "unknown" closed.
Caused by: java.io.IOException: Unexpected termination of the channel
Debugging Questions:
This error suggests a Jenkins agent issue. How would you determine whether it's a problem with the agent itself or the network?
If this happens only on the develop branch, what configuration differences between branches would you check?
How would you confirm whether the agent is overloaded or experiencing resource exhaustion?
If you're using Kubernetes-based agents, what would you check to ensure they are being properly scheduled and assigned resources?




Common Development Environment Debugging
1. Dependency Conflicts in a Polyglot Project
Scenario:
Your team is working on a Python + Node.js microservice. Running npm install works fine, but pip install -r requirements.txt fails with:

bash
Copy
Edit
ERROR: Package numpy 1.19.5 is not compatible with tensorflow 2.12.0
Additionally, when running the Node.js service, you get:

bash
Copy
Edit
Error: Cannot find module 'express'
Even though package.json includes "express": "^4.17.1".

Debugging Questions:
The Python dependency conflict suggests an issue with TensorFlow and NumPy. How would you fix this?
The missing Node.js module occurs despite being in package.json. How would you check whether the module is correctly installed?
If this issue only occurs on a specific developer’s machine but not others, what environment differences would you check?
If a Docker container is used for development, what steps would you take to ensure the dependencies are correctly installed inside the container?
How would you enforce consistent dependencies across developers and CI/CD?
GitHub Actions Debugging
2. Secret Management Issue in GitHub Actions
Scenario:
A GitHub Actions workflow is failing at the deployment step with the error:

bash
Copy
Edit
Error: Missing required environment variable DEPLOY_API_KEY
Your .github/workflows/deploy.yml includes:

yaml
Copy
Edit
env:
  DEPLOY_API_KEY: ${{ secrets.DEPLOY_API_KEY }}
But the secret exists in the GitHub repository settings.

Debugging Questions:
If the secret exists, why would GitHub Actions fail to read it?
How would you check if the workflow has the correct permissions to access secrets?
If the workflow runs fine on feature branches but fails on main, what repository settings or branch protections could be affecting it?
If the workflow runs on a self-hosted runner, how would you verify whether the runner has access to repository secrets?
How would you securely debug and verify that the secret is being correctly injected into the environment?
3. Failed Artifact Upload in CI/CD
Scenario:
A GitHub Actions job compiles a Java application and attempts to upload a build artifact (.jar file) for deployment. The workflow fails with:

bash
Copy
Edit
Error: No such file or directory: 'build/output.jar'
Your workflow includes:

yaml
Copy
Edit
- name: Build JAR
  run: mvn package -DskipTests

- name: Upload JAR
  uses: actions/upload-artifact@v3
  with:
    name: app-artifact
    path: build/output.jar
Debugging Questions:
The error suggests the file wasn't generated or is in the wrong location. How would you verify whether the build process succeeded?
If the mvn package step logs show a successful build, but the file is still missing, what could have happened?
How would you determine if this is a permissions issue vs. a misconfigured artifact path?
If the workflow works fine on Linux runners but fails on Windows runners, what differences would you check?
How would you modify the workflow to fail fast if the artifact isn't found before reaching the upload step?
