name: Track Sub-Issue Completion

on:
  issues:
    types: [closed]

permissions:
  issues: write
  contents: read

jobs:
  update-parent:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'sub-issue')
    
    steps:
      - name: Extract parent issue number
        id: extract_parent
        uses: actions/github-script@v7
        with:
          script: |
            const body = context.payload.issue.body;
            const match = body.match(/\*\*Parent Issue:\*\*\s*#(\d+)/);
            
            if (!match) {
              core.setFailed('Could not find parent issue reference');
              return null;
            }
            
            const parentNumber = parseInt(match[1]);
            core.setOutput('parent_number', parentNumber);
            
            // Extract compatibility type
            const compatMatch = context.payload.issue.title.match(/\[(.*?)\]\s*(ADT|Jupyter|Airflow)/);
            const compat = compatMatch ? compatMatch[2] : 'Unknown';
            core.setOutput('compat', compat);
            
            return { parentNumber, compat };

      - name: Update parent issue
        uses: actions/github-script@v7
        env:
          PARENT_NUMBER: ${{ steps.extract_parent.outputs.parent_number }}
          COMPAT: ${{ steps.extract_parent.outputs.compat }}
        with:
          script: |
            const parentNumber = parseInt(process.env.PARENT_NUMBER);
            const compat = process.env.COMPAT;
            const subIssueNumber = context.issue.number;
            const subIssueTitle = context.payload.issue.title;
            
            // Remove the TODO label for this compatibility
            const todoLabel = `todo-${compat.toLowerCase()}`;
            
            try {
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: parentNumber,
                name: todoLabel
              });
            } catch (error) {
              console.log(`Label ${todoLabel} not found or already removed`);
            }
            
            // Add completed label
            const completedLabel = `completed-${compat.toLowerCase()}`;
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parentNumber,
              labels: [completedLabel]
            });
            
            // Add completion comment to parent issue
            const comment = `âœ… **${compat} Integration Completed**

Sub-issue #${subIssueNumber} (${subIssueTitle}) has been closed.

The ${compat} compatibility integration is now complete.`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parentNumber,
              body: comment
            });

      - name: Check if all sub-issues completed
        uses: actions/github-script@v7
        env:
          PARENT_NUMBER: ${{ steps.extract_parent.outputs.parent_number }}
        with:
          script: |
            const parentNumber = parseInt(process.env.PARENT_NUMBER);
            
            // Get parent issue
            const parentIssue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parentNumber
            });
            
            // Check for any remaining TODO labels
            const labels = parentIssue.data.labels.map(l => l.name);
            const todoLabels = labels.filter(l => l.startsWith('todo-'));
            
            if (todoLabels.length === 0) {
              // All sub-issues completed!
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: parentNumber,
                name: 'in-progress'
              });
              
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: parentNumber,
                labels: ['completed']
              });
              
              // Get requester info from parent issue
              const body = parentIssue.data.body;
              const emailMatch = body.match(/### Requester Email\s*\n\s*(.+)/);
              const appNameMatch = body.match(/### Application Name\s*\n\s*(.+)/);
              const email = emailMatch ? emailMatch[1].trim() : '';
              const appName = appNameMatch ? appNameMatch[1].trim() : '';
              
              const completionComment = `ðŸŽ‰ **All Compatibility Integrations Completed!**

All sub-issues have been completed. The onboarding process for this application is now complete.

**Completed Integrations:**
${labels.filter(l => l.startsWith('completed-')).map(l => `- âœ… ${l.replace('completed-', '').toUpperCase()}`).join('\n')}

@${parentIssue.data.user.login} Your application is ready!

---
*Notification sent to: ${email}*`;

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: parentNumber,
                body: completionComment
              });
              
              // Close the parent issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: parentNumber,
                state: 'closed'
              });
            }
