name: 'OpenShift Pod Runner'
description: 'Runs a command inside an OpenShift pod using a specified image, environment variables, and volumes, then tears down the pod.'
inputs:
  image_name:
    description: 'The name of the image to use for the pod.'
    required: true
  oc_parameters:
    description: 'Comma-separated OpenShift template parameters (e.g., KEY1=value1,KEY2=value2).'
    required: true
  command:
    description: 'Command to execute inside the pod.'
    required: true
  env_vars:
    description: 'Comma-separated environment variables (e.g., ENV1=value1,ENV2=value2).'
    required: false
  volumes:
    description: 'Comma-separated volume definitions (e.g., /host/path:/container/path,RO).'
    required: false
outputs:
  pod_status:
    description: 'Status of the executed pod.'
runs:
  using: 'composite'
  steps:
    - name: Authenticate with OpenShift
      shell: bash
      run: |
        echo "${{ secrets.OPENSHIFT_TOKEN }}" | oc login --token=$(cat -) --server=${{ secrets.OPENSHIFT_SERVER }}

    - name: Process OpenShift Template
      shell: bash
      run: |
        # Prepare environment variables for the pod
        ENV_VARS=$(echo '${{ inputs.env_vars }}' | awk -F, '{ for (i=1; i<=NF; i++) print "--env " $i }')

        # Prepare volumes for the pod
        VOLUMES=$(echo '${{ inputs.volumes }}' | awk -F, '{ for (i=1; i<=NF; i++) { split($i, v, ":"); print "--volume " v[1] ":" v[2] }}')

        # Apply parameters and generate the pod template
        OC_PARAMS=$(echo '${{ inputs.oc_parameters }}' | tr ',' ' ')
        oc process -f pod-template.yaml -p IMAGE_NAME=${{ inputs.image_name }} $OC_PARAMS > pod.yaml

        # Inject environment variables and volumes
        sed -i "/containers:/a \ \ \ \ env: [$ENV_VARS]" pod.yaml
        sed -i "/spec:/a \ \ \ \ volumes: [$VOLUMES]" pod.yaml

    - name: Deploy Pod
      shell: bash
      run: oc apply -f pod.yaml


gh api repos/OWNER/REPO/actions/runs/$(gh run list --repo OWNER/REPO --json databaseId --jq '.[0].databaseId')/logs -q | tee workflow.log

    - name: Execute Command in Pod
      shell: bash
      run: |
        POD_NAME=$(oc get pod -l app=${{ inputs.image_name }} -o jsonpath='{.items[0].metadata.name}')
        oc exec $POD_NAME -- sh -c '${{ inputs.command }}'

    - name: Tear Down Pod
      shell: bash
      run: oc delete -f pod.yaml


apiVersion: v1
kind: Pod
metadata:
  name: ${POD_NAME}
spec:
  containers:
  - name: example-container
    image: nginx:latest
    volumeMounts:
    - name: config-volume
      mountPath: /app/config # Change this to the desired mount path inside the container
  volumes:
  - name: config-volume
    configMap:
      name: ${CONFIGMAP_NAME}

name: Deploy with Volume Mount

on:
  workflow_dispatch:
    inputs:
      folder_path:
        description: "Local folder to mount"
        required: true
        default: "/path/to/local/folder"
      pod_name:
        description: "Pod name"
        required: true
        default: "example-pod"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Process and Apply OpenShift Template
        run: |
          # Define variables
          LOCAL_FOLDER="${{ inputs.folder_path }}"
          POD_NAME="${{ inputs.pod_name }}"

          # Create a ConfigMap from the local folder
          oc create configmap my-config --from-file=$LOCAL_FOLDER --dry-run=client -o yaml | oc apply -f -

          # Process the OpenShift template and deploy
          oc process -f pod-template.yaml \
            -p POD_NAME=$POD_NAME \
            -p CONFIGMAP_NAME=my-config \
            | oc apply -f -
