import React, { useState } from 'react';
import { 
  Play, 
  Pause, 
  Settings, 
  Upload, 
  Download, 
  BarChart3, 
  Database, 
  Cpu, 
  HardDrive, 
  Activity, 
  Plus, 
  Eye, 
  Edit,
  Trash2,
  ChevronRight,
  CheckCircle,
  AlertCircle,
  Clock,
  Users,
  Server,
  GitBranch,
  Shield,
  MonitorSpeaker,
  ArrowLeft,
  ArrowRight,
  Check,
  X,
  Lock,
  User,
  Mail
} from 'lucide-react';

export default function OpenShiftAIDemo() {
  const [isLoggedIn, setIsLoggedIn] = useState(true);
  const [activeTab, setActiveTab] = useState('projects');
  const [selectedProject, setSelectedProject] = useState(null);
  const [showDeployModal, setShowDeployModal] = useState(false);
  const [showNewProjectWizard, setShowNewProjectWizard] = useState(false);
  const [wizardStep, setWizardStep] = useState(1);
  const [loginForm, setLoginForm] = useState({ username: '', password: '' });
  const [newProjectForm, setNewProjectForm] = useState({
    name: '',
    description: '',
    template: 'custom',
    models: []
  });
  const [currentModel, setCurrentModel] = useState({
    name: '',
    framework: 'PyTorch',
    runtime: 'KServe',
    storageUri: '',
    minReplicas: 1,
    maxReplicas: 10,
    cpuRequest: '100m',
    memoryRequest: '256Mi',
    enableLogging: true,
    enableExplainability: false,
    enableAutoScaling: true
  });

  const projects = [
    {
      id: 1,
      name: 'Customer Churn Prediction',
      description: 'ML model to predict customer churn using behavioral data',
      status: 'Active',
      models: 3,
      lastUpdated: '2024-08-10',
      owner: 'Data Science Team'
    },
    {
      id: 2,
      name: 'Image Classification',
      description: 'Computer vision model for product categorization',
      status: 'Active',
      models: 1,
      lastUpdated: '2024-08-09',
      owner: 'ML Engineering'
    },
    {
      id: 3,
      name: 'Fraud Detection',
      description: 'Real-time fraud detection for financial transactions',
      status: 'Pending',
      models: 2,
      lastUpdated: '2024-08-08',
      owner: 'Security Team'
    }
  ];

  const models = [
    {
      id: 1,
      name: 'churn-predictor-v2',
      framework: 'scikit-learn',
      status: 'Running',
      replicas: '2/2',
      cpu: '45%',
      memory: '1.2GB',
      requests: 1250,
      version: 'v2.1.0',
      endpoint: 'https://churn-predictor-v2-demo.apps.cluster.local/v1/predict'
    },
    {
      id: 2,
      name: 'image-classifier',
      framework: 'PyTorch',
      status: 'Running',
      replicas: '3/3',
      cpu: '78%',
      memory: '2.8GB',
      requests: 890,
      version: 'v1.5.2',
      endpoint: 'https://image-classifier-demo.apps.cluster.local/v1/predict'
    },
    {
      id: 3,
      name: 'fraud-detector',
      framework: 'TensorFlow',
      status: 'Scaling',
      replicas: '1/3',
      cpu: '12%',
      memory: '0.8GB',
      requests: 45,
      version: 'v3.0.0',
      endpoint: 'https://fraud-detector-demo.apps.cluster.local/v1/predict'
    }
  ];

  const handleLogin = (e) => {
    e.preventDefault();
    // Simple demo login - accepts any username/password
    if (loginForm.username.trim() && loginForm.password.trim()) {
      setIsLoggedIn(true);
    } else {
      alert('Please enter both username and password');
    }
  };

  const handleLogout = () => {
    setIsLoggedIn(false);
    setLoginForm({ username: '', password: '' });
  };

  const addModelToProject = () => {
    setNewProjectForm(prev => ({
      ...prev,
      models: [...prev.models, { ...currentModel, id: Date.now() }]
    }));
    setCurrentModel({
      name: '',
      framework: 'PyTorch',
      runtime: 'KServe',
      storageUri: '',
      minReplicas: 1,
      maxReplicas: 10,
      cpuRequest: '100m',
      memoryRequest: '256Mi',
      enableLogging: true,
      enableExplainability: false,
      enableAutoScaling: true
    });
  };

  const removeModelFromProject = (modelId) => {
    setNewProjectForm(prev => ({
      ...prev,
      models: prev.models.filter(m => m.id !== modelId)
    }));
  };

  const createProject = () => {
    console.log('Creating project:', newProjectForm);
    setShowNewProjectWizard(false);
    setWizardStep(1);
    setNewProjectForm({ name: '', description: '', template: 'custom', models: [] });
  };

  const StatusBadge = ({ status }) => {
    const colors = {
      'Running': 'bg-green-100 text-green-800 border-green-200',
      'Active': 'bg-green-100 text-green-800 border-green-200',
      'Pending': 'bg-yellow-100 text-yellow-800 border-yellow-200',
      'Scaling': 'bg-blue-100 text-blue-800 border-blue-200',
      'Error': 'bg-red-100 text-red-800 border-red-200'
    };
    
    return (
      <span className={`px-2 py-1 text-xs font-medium rounded-full border ${colors[status] || colors['Pending']}`}>
        {status}
      </span>
    );
  };

  // Login Page
  if (!isLoggedIn) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-red-50 to-gray-100 flex items-center justify-center">
        <div className="bg-white rounded-lg shadow-xl w-full max-w-md mx-4">
          <div className="p-8">
            <div className="text-center mb-8">
              <div className="flex items-center justify-center gap-2 mb-4">
                <div className="w-12 h-12 bg-red-600 rounded-lg flex items-center justify-center">
                  <span className="text-white font-bold text-lg">OAI</span>
                </div>
              </div>
              <h1 className="text-2xl font-bold text-gray-900 mb-2">OpenShift AI</h1>
              <p className="text-gray-600">Sign in to your ML platform</p>
            </div>

            <form onSubmit={handleLogin} className="space-y-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  <User className="w-4 h-4 inline mr-2" />
                  Username
                </label>
                <input
                  type="text"
                  required
                  value={loginForm.username}
                  onChange={(e) => setLoginForm(prev => ({ ...prev, username: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-red-500 focus:border-red-500"
                  placeholder="Enter your username"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  <Lock className="w-4 h-4 inline mr-2" />
                  Password
                </label>
                <input
                  type="password"
                  required
                  value={loginForm.password}
                  onChange={(e) => setLoginForm(prev => ({ ...prev, password: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-red-500 focus:border-red-500"
                  placeholder="Enter your password"
                />
              </div>

              <button
                type="submit"
                className="w-full bg-red-600 text-white py-2 px-4 rounded-md hover:bg-red-700 transition-colors font-medium"
              >
                Sign In
              </button>
            </form>

            <div className="mt-6 text-center">
              <p className="text-sm text-gray-600">
                Demo credentials: Use any username and password
              </p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  const NewProjectWizard = () => (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg w-full max-w-4xl mx-4 max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="p-6 border-b border-gray-200 flex justify-between items-center">
          <div>
            <h2 className="text-xl font-semibold text-gray-900">Create New Data Science Project</h2>
            <p className="text-sm text-gray-600 mt-1">Step {wizardStep} of 3</p>
          </div>
          <button 
            onClick={() => setShowNewProjectWizard(false)}
            className="text-gray-400 hover:text-gray-600"
          >
            <X className="w-6 h-6" />
          </button>
        </div>

        {/* Progress Bar */}
        <div className="px-6 py-4 bg-gray-50 border-b">
          <div className="flex items-center">
            {[1, 2, 3].map((step) => (
              <div key={step} className="flex items-center">
                <div className={`flex items-center justify-center w-8 h-8 rounded-full border-2 ${
                  step <= wizardStep 
                    ? 'bg-red-600 border-red-600 text-white' 
                    : 'bg-white border-gray-300 text-gray-400'
                }`}>
                  {step < wizardStep ? <Check className="w-4 h-4" /> : step}
                </div>
                {step < 3 && (
                  <div className={`w-12 h-0.5 mx-2 ${
                    step < wizardStep ? 'bg-red-600' : 'bg-gray-300'
                  }`} />
                )}
              </div>
            ))}
          </div>
          <div className="flex justify-between mt-2 text-sm">
            <span className={wizardStep >= 1 ? 'text-red-600 font-medium' : 'text-gray-500'}>
              Project Details
            </span>
            <span className={wizardStep >= 2 ? 'text-red-600 font-medium' : 'text-gray-500'}>
              Model Configuration
            </span>
            <span className={wizardStep >= 3 ? 'text-red-600 font-medium' : 'text-gray-500'}>
              Review & Create
            </span>
          </div>
        </div>

        {/* Step Content */}
        <div className="p-6">
          {wizardStep === 1 && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Project Information</h3>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Project Name *</label>
                <input
                  type="text"
                  required
                  value={newProjectForm.name}
                  onChange={(e) => setNewProjectForm(prev => ({ ...prev, name: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-red-500 focus:border-red-500"
                  placeholder="e.g., Customer Analytics Project"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Description</label>
                <textarea
                  value={newProjectForm.description}
                  onChange={(e) => setNewProjectForm(prev => ({ ...prev, description: e.target.value }))}
                  rows={3}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-red-500 focus:border-red-500"
                  placeholder="Describe your project and its objectives..."
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Project Template</label>
                <select
                  value={newProjectForm.template}
                  onChange={(e) => setNewProjectForm(prev => ({ ...prev, template: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-red-500 focus:border-red-500"
                >
                  <option value="custom">Custom Project</option>
                  <option value="classification">Classification Template</option>
                  <option value="regression">Regression Template</option>
                  <option value="computer-vision">Computer Vision Template</option>
                  <option value="nlp">Natural Language Processing</option>
                </select>
              </div>
            </div>
          )}

          {wizardStep === 2 && (
            <div className="space-y-6">
              <div className="flex justify-between items-center">
                <h3 className="text-lg font-semibold text-gray-900">Model Configuration</h3>
                <p className="text-sm text-gray-600">{newProjectForm.models.length} model(s) configured</p>
              </div>

              {/* Current Model Form */}
              <div className="bg-gray-50 p-6 rounded-lg border">
                <h4 className="font-medium text-gray-900 mb-4">Add New Model</h4>
                
                <div className="grid grid-cols-2 gap-4 mb-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Model Name *</label>
                    <input
                      type="text"
                      value={currentModel.name}
                      onChange={(e) => setCurrentModel(prev => ({ ...prev, name: e.target.value }))}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-red-500 focus:border-red-500"
                      placeholder="my-model-v1"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Framework</label>
                    <select
                      value={currentModel.framework}
                      onChange={(e) => setCurrentModel(prev => ({ ...prev, framework: e.target.value }))}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-red-500 focus:border-red-500"
                    >
                      <option value="PyTorch">PyTorch</option>
                      <option value="TensorFlow">TensorFlow</option>
                      <option value="scikit-learn">scikit-learn</option>
                      <option value="XGBoost">XGBoost</option>
                      <option value="Custom">Custom</option>
                    </select>
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-4 mb-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Runtime</label>
                    <select
                      value={currentModel.runtime}
                      onChange={(e) => setCurrentModel(prev => ({ ...prev, runtime: e.target.value }))}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-red-500 focus:border-red-500"
                    >
                      <option value="KServe">KServe</option>
                      <option value="TorchServe">TorchServe</option>
                      <option value="Triton">Triton</option>
                      <option value="Custom">Custom</option>
                    </select>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Storage URI *</label>
                    <input
                      type="text"
                      value={currentModel.storageUri}
                      onChange={(e) => setCurrentModel(prev => ({ ...prev, storageUri: e.target.value }))}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-red-500 focus:border-red-500"
                      placeholder="s3://bucket/model.pkl"
                    />
                  </div>
                </div>

                <div className="grid grid-cols-4 gap-4 mb-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Min Replicas</label>
                    <input
                      type="number"
                      min="0"
                      value={currentModel.minReplicas}
                      onChange={(e) => setCurrentModel(prev => ({ ...prev, minReplicas: parseInt(e.target.value) }))}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-red-500 focus:border-red-500"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Max Replicas</label>
                    <input
                      type="number"
                      min="1"
                      value={currentModel.maxReplicas}
                      onChange={(e) => setCurrentModel(prev => ({ ...prev, maxReplicas: parseInt(e.target.value) }))}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-red-500 focus:border-red-500"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">CPU Request</label>
                    <input
                      type="text"
                      value={currentModel.cpuRequest}
                      onChange={(e) => setCurrentModel(prev => ({ ...prev, cpuRequest: e.target.value }))}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-red-500 focus:border-red-500"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Memory Request</label>
                    <input
                      type="text"
                      value={currentModel.memoryRequest}
                      onChange={(e) => setCurrentModel(prev => ({ ...prev, memoryRequest: e.target.value }))}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-red-500 focus:border-red-500"
                    />
                  </div>
                </div>

                <div className="space-y-2 mb-4">
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={currentModel.enableLogging}
                      onChange={(e) => setCurrentModel(prev => ({ ...prev, enableLogging: e.target.checked }))}
                      className="rounded border-gray-300 text-red-600 focus:ring-red-500"
                    />
                    <span className="ml-2 text-sm text-gray-700">Enable request/response logging</span>
                  </label>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={currentModel.enableExplainability}
                      onChange={(e) => setCurrentModel(prev => ({ ...prev, enableExplainability: e.target.checked }))}
                      className="rounded border-gray-300 text-red-600 focus:ring-red-500"
                    />
                    <span className="ml-2 text-sm text-gray-700">Enable model explainability</span>
                  </label>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={currentModel.enableAutoScaling}
                      onChange={(e) => setCurrentModel(prev => ({ ...prev, enableAutoScaling: e.target.checked }))}
                      className="rounded border-gray-300 text-red-600 focus:ring-red-500"
                    />
                    <span className="ml-2 text-sm text-gray-700">Enable auto-scaling</span>
                  </label>
                </div>

                <button
                  onClick={addModelToProject}
                  disabled={!currentModel.name || !currentModel.storageUri}
                  className="bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-700 disabled:bg-gray-400 disabled:cursor-not-allowed"
                >
                  Add Model to Project
                </button>
              </div>

              {/* Models List */}
              {newProjectForm.models.length > 0 && (
                <div>
                  <h4 className="font-medium text-gray-900 mb-3">Configured Models</h4>
                  <div className="space-y-2">
                    {newProjectForm.models.map((model) => (
                      <div key={model.id} className="flex items-center justify-between bg-white p-3 border rounded-md">
                        <div>
                          <span className="font-medium text-gray-900">{model.name}</span>
                          <span className="mx-2 text-gray-400">•</span>
                          <span className="text-gray-600">{model.framework}</span>
                          <span className="mx-2 text-gray-400">•</span>
                          <span className="text-gray-600">{model.runtime}</span>
                        </div>
                        <button
                          onClick={() => removeModelFromProject(model.id)}
                          className="text-red-600 hover:text-red-700 p-1"
                        >
                          <Trash2 className="w-4 h-4" />
                        </button>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          )}

          {wizardStep === 3 && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Review & Create Project</h3>
              
              <div className="bg-gray-50 p-6 rounded-lg">
                <h4 className="font-medium text-gray-900 mb-4">Project Summary</h4>
                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div>
                    <span className="text-gray-600">Name:</span>
                    <span className="ml-2 font-medium">{newProjectForm.name}</span>
                  </div>
                  <div>
                    <span className="text-gray-600">Template:</span>
                    <span className="ml-2 font-medium">{newProjectForm.template}</span>
                  </div>
                  <div className="col-span-2">
                    <span className="text-gray-600">Description:</span>
                    <p className="mt-1 text-gray-900">{newProjectForm.description || 'No description provided'}</p>
                  </div>
                </div>
              </div>

              {newProjectForm.models.length > 0 && (
                <div className="bg-gray-50 p-6 rounded-lg">
                  <h4 className="font-medium text-gray-900 mb-4">Models to Deploy ({newProjectForm.models.length})</h4>
                  <div className="space-y-3">
                    {newProjectForm.models.map((model) => (
                      <div key={model.id} className="bg-white p-3 rounded border">
                        <div className="flex justify-between items-start mb-2">
                          <span className="font-medium text-gray-900">{model.name}</span>
                          <StatusBadge status="Ready to Deploy" />
                        </div>
                        <div className="grid grid-cols-2 gap-2 text-xs text-gray-600">
                          <div>Framework: {model.framework}</div>
                          <div>Runtime: {model.runtime}</div>
                          <div>Replicas: {model.minReplicas}-{model.maxReplicas}</div>
                          <div>Resources: {model.cpuRequest}, {model.memoryRequest}</div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          )}
        </div>

        {/* Footer */}
        <div className="px-6 py-4 border-t border-gray-200 flex justify-between">
          <div>
            {wizardStep > 1 && (
              <button
                onClick={() => setWizardStep(prev => prev - 1)}
                className="flex items-center gap-2 px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
              >
                <ArrowLeft className="w-4 h-4" />
                Previous
              </button>
            )}
          </div>
          <div className="flex gap-3">
            <button
              onClick={() => setShowNewProjectWizard(false)}
              className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
            >
              Cancel
            </button>
            {wizardStep < 3 ? (
              <button
                onClick={() => setWizardStep(prev => prev + 1)}
                disabled={wizardStep === 1 && !newProjectForm.name}
                className="flex items-center gap-2 px-4 py-2 text-sm font-medium text-white bg-red-600 rounded-md hover:bg-red-700 disabled:bg-gray-400 disabled:cursor-not-allowed"
              >
                Next
                <ArrowRight className="w-4 h-4" />
              </button>
            ) : (
              <button
                onClick={createProject}
                className="px-4 py-2 text-sm font-medium text-white bg-red-600 rounded-md hover:bg-red-700"
              >
                Create Project
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  );

  const DeployModelModal = () => (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg w-full max-w-2xl mx-4">
        <div className="p-6 border-b border-gray-200">
          <h2 className="text-xl font-semibold text-gray-900">Deploy New Model</h2>
        </div>
        <div className="p-6 space-y-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Model Name</label>
            <input type="text" className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-red-500 focus:border-red-500" placeholder="my-awesome-model" />
          </div>
          
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Framework</label>
              <select className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-red-500 focus:border-red-500">
                <option>PyTorch</option>
                <option>TensorFlow</option>
                <option>scikit-learn</option>
                <option>XGBoost</option>
                <option>Custom</option>
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Runtime</label>
              <select className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-red-500 focus:border-red-500">
                <option>KServe</option>
                <option>TorchServe</option>
                <option>Triton</option>
                <option>Custom</option>
              </select>
            </div>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Model Location</label>
            <input type="text" className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-red-500 focus:border-red-500" placeholder="s3://my-bucket/models/model.pkl" />
          </div>

          <div className="grid grid-cols-3 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Min Replicas</label>
              <input type="number" min="0" defaultValue="1" className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-red-500 focus:border-red-500" />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Max Replicas</label>
              <input type="number" min="1" defaultValue="10" className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-red-500 focus:border-red-500" />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">CPU Request</label>
              <input type="text" defaultValue="100m" className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-red-500 focus:border-red-500" />
            </div>
          </div>

          <div className="bg-gray-50 p-4 rounded-md">
            <h4 className="font-medium text-gray-900 mb-2">Advanced Configuration</h4>
            <div className="space-y-2">
              <label className="flex items-center">
                <input type="checkbox" className="rounded border-gray-300 text-red-600 focus:ring-red-500" />
                <span className="ml-2 text-sm text-gray-700">Enable request/response logging</span>
              </label>
              <label className="flex items-center">
                <input type="checkbox" className="rounded border-gray-300 text-red-600 focus:ring-red-500" />
                <span className="ml-2 text-sm text-gray-700">Enable model explainability</span>
              </label>
              <label className="flex items-center">
                <input type="checkbox" defaultChecked className="rounded border-gray-300 text-red-600 focus:ring-red-500" />
                <span className="ml-2 text-sm text-gray-700">Auto-scaling enabled</span>
              </label>
            </div>
          </div>
        </div>
        <div className="px-6 py-4 border-t border-gray-200 flex justify-end space-x-3">
          <button 
            onClick={() => setShowDeployModal(false)}
            className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
          >
            Cancel
          </button>
          <button className="px-4 py-2 text-sm font-medium text-white bg-red-600 rounded-md hover:bg-red-700">
            Deploy Model
          </button>
        </div>
      </div>
    </div>
  );

  const ProjectsView = () => (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold text-gray-900">Data Science Projects</h2>
        <button 
          onClick={() => setShowNewProjectWizard(true)}
          className="bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-700 flex items-center gap-2"
        >
          <Plus className="w-4 h-4" />
          New Project
        </button>
      </div>
      
      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
        {projects.map(project => (
          <div key={project.id} className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 hover:shadow-md transition-shadow cursor-pointer" onClick={() => setSelectedProject(project)}>
            <div className="flex justify-between items-start mb-4">
              <h3 className="text-lg font-semibold text-gray-900">{project.name}</h3>
              <StatusBadge status={project.status} />
            </div>
            <p className="text-gray-600 mb-4 text-sm">{project.description}</p>
            <div className="space-y-2 text-sm text-gray-500">
              <div className="flex justify-between">
                <span>Models:</span>
                <span className="font-medium">{project.models}</span>
              </div>
              <div className="flex justify-between">
                <span>Owner:</span>
                <span className="font-medium">{project.owner}</span>
              </div>
              <div className="flex justify-between">
                <span>Updated:</span>
                <span className="font-medium">{project.lastUpdated}</span>
              </div>
            </div>
            <div className="mt-4 pt-4 border-t border-gray-100">
              <button className="text-red-600 hover:text-red-700 text-sm font-medium flex items-center">
                View Details <ChevronRight className="w-4 h-4 ml-1" />
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );

  const ModelsView = () => (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold text-gray-900">Model Deployments</h2>
        <button 
          onClick={() => setShowDeployModal(true)}
          className="bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-700 flex items-center gap-2"
        >
          <Plus className="w-4 h-4" />
          Deploy Model
        </button>
      </div>
      
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
        <div className="px-6 py-4 border-b border-gray-200 bg-gray-50">
          <div className="grid grid-cols-8 gap-4 text-sm font-medium text-gray-700">
            <div className="col-span-2">Model Name</div>
            <div>Framework</div>
            <div>Status</div>
            <div>Replicas</div>
            <div>Resources</div>
            <div>Requests</div>
            <div>Actions</div>
          </div>
        </div>
        
        <div className="divide-y divide-gray-200">
          {models.map(model => (
            <div key={model.id} className="px-6 py-4 hover:bg-gray-50">
              <div className="grid grid-cols-8 gap-4 items-center">
                <div className="col-span-2">
                  <div className="font-medium text-gray-900">{model.name}</div>
                  <div className="text-sm text-gray-500">{model.version}</div>
                </div>
                <div className="text-sm text-gray-600">{model.framework}</div>
                <div><StatusBadge status={model.status} /></div>
                <div className="text-sm text-gray-600">{model.replicas}</div>
                <div className="text-sm text-gray-600">
                  <div className="flex items-center gap-1">
                    <Cpu className="w-3 h-3" />
                    {model.cpu}
                  </div>
                  <div className="flex items-center gap-1">
                    <HardDrive className="w-3 h-3" />
                    {model.memory}
                  </div>
                </div>
                <div className="text-sm text-gray-600 font-medium">{model.requests.toLocaleString()}</div>
                <div className="flex gap-2">
                  <button className="text-red-600 hover:text-red-700 p-1">
                    <Eye className="w-4 h-4" />
                  </button>
                  <button className="text-gray-600 hover:text-gray-700 p-1">
                    <Edit className="w-4 h-4" />
                  </button>
                  <button className="text-gray-600 hover:text-gray-700 p-1">
                    <Settings className="w-4 h-4" />
                  </button>
                  <button className="text-red-600 hover:text-red-700 p-1">
                    <Trash2 className="w-4 h-4" />
                  </button>
                </div>
              </div>
              
              <div className="mt-3 pt-3 border-t border-gray-100">
                <div className="text-xs text-gray-500 font-mono bg-gray-50 p-2 rounded">
                  Endpoint: {model.endpoint}
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );

  const MonitoringView = () => (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold text-gray-900">Model Monitoring</h2>
      
      <div className="grid grid-cols-4 gap-6">
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Total Models</p>
              <p className="text-2xl font-bold text-gray-900">12</p>
            </div>
            <div className="p-3 bg-blue-100 rounded-full">
              <Server className="w-6 h-6 text-blue-600" />
            </div>
          </div>
        </div>
        
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Active Deployments</p>
              <p className="text-2xl font-bold text-green-600">8</p>
            </div>
            <div className="p-3 bg-green-100 rounded-full">
              <CheckCircle className="w-6 h-6 text-green-600" />
            </div>
          </div>
        </div>
        
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Total Requests (24h)</p>
              <p className="text-2xl font-bold text-gray-900">45.2k</p>
            </div>
            <div className="p-3 bg-purple-100 rounded-full">
              <Activity className="w-6 h-6 text-purple-600" />
            </div>
          </div>
        </div>
        
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Avg Response Time</p>
              <p className="text-2xl font-bold text-gray-900">245ms</p>
            </div>
            <div className="p-3 bg-orange-100 rounded-full">
              <Clock className="w-6 h-6 text-orange-600" />
            </div>
          </div>
        </div>
      </div>
      
      <div className="grid grid-cols-2 gap-6">
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Resource Usage</h3>
          <div className="space-y-4">
            <div>
              <div className="flex justify-between text-sm mb-1">
                <span>CPU Usage</span>
                <span>65%</span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div className="bg-blue-600 h-2 rounded-full" style={{width: '65%'}}></div>
              </div>
            </div>
            <div>
              <div className="flex justify-between text-sm mb-1">
                <span>Memory Usage</span>
                <span>78%</span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div className="bg-green-600 h-2 rounded-full" style={{width: '78%'}}></div>
              </div>
            </div>
            <div>
              <div className="flex justify-between text-sm mb-1">
                <span>Storage Usage</span>
                <span>45%</span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div className="bg-purple-600 h-2 rounded-full" style={{width: '45%'}}></div>
              </div>
            </div>
          </div>
        </div>
        
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Recent Activity</h3>
          <div className="space-y-3">
            <div className="flex items-start gap-3">
              <div className="p-1 bg-green-100 rounded">
                <CheckCircle className="w-3 h-3 text-green-600" />
              </div>
              <div className="text-sm">
                <p className="text-gray-900 font-medium">churn-predictor-v2 deployed successfully</p>
                <p className="text-gray-500">2 hours ago</p>
              </div>
            </div>
            <div className="flex items-start gap-3">
              <div className="p-1 bg-blue-100 rounded">
                <Activity className="w-3 h-3 text-blue-600" />
              </div>
              <div className="text-sm">
                <p className="text-gray-900 font-medium">Auto-scaling triggered for image-classifier</p>
                <p className="text-gray-500">4 hours ago</p>
              </div>
            </div>
            <div className="flex items-start gap-3">
              <div className="p-1 bg-yellow-100 rounded">
                <AlertCircle className="w-3 h-3 text-yellow-600" />
              </div>
              <div className="text-sm">
                <p className="text-gray-900 font-medium">High memory usage detected</p>
                <p className="text-gray-500">6 hours ago</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-gray-100">
      {/* Header */}
      <header className="bg-white border-b border-gray-200 px-6 py-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-4">
            <div className="flex items-center gap-2">
              <div className="w-8 h-8 bg-red-600 rounded flex items-center justify-center">
                <span className="text-white font-bold text-sm">OAI</span>
              </div>
              <h1 className="text-xl font-bold text-gray-900">OpenShift AI</h1>
            </div>
            <div className="text-sm text-gray-500">Model Serving Platform</div>
          </div>
          
          <div className="flex items-center gap-4">
            <button className="text-gray-600 hover:text-gray-700 p-2">
              <Settings className="w-5 h-5" />
            </button>
            <div className="flex items-center gap-2 bg-gray-100 rounded-full px-3 py-1">
              <Users className="w-4 h-4 text-gray-600" />
              <span className="text-sm text-gray-700">Admin User</span>
            </div>
            <button 
              onClick={handleLogout}
              className="text-sm text-red-600 hover:text-red-700 font-medium"
            >
              Logout
            </button>
          </div>
        </div>
      </header>

      {/* Navigation */}
      <nav className="bg-white border-b border-gray-200 px-6 py-2">
        <div className="flex gap-6">
          <button 
            onClick={() => setActiveTab('projects')}
            className={`px-3 py-2 text-sm font-medium rounded-md transition-colors ${
              activeTab === 'projects' 
                ? 'bg-red-100 text-red-700 border border-red-200' 
                : 'text-gray-600 hover:text-gray-900'
            }`}
          >
            Data Science Projects
          </button>
          <button 
            onClick={() => setActiveTab('models')}
            className={`px-3 py-2 text-sm font-medium rounded-md transition-colors ${
              activeTab === 'models' 
                ? 'bg-red-100 text-red-700 border border-red-200' 
                : 'text-gray-600 hover:text-gray-900'
            }`}
          >
            Model Serving
          </button>
          <button 
            onClick={() => setActiveTab('monitoring')}
            className={`px-3 py-2 text-sm font-medium rounded-md transition-colors ${
              activeTab === 'monitoring' 
                ? 'bg-red-100 text-red-700 border border-red-200' 
                : 'text-gray-600 hover:text-gray-900'
            }`}
          >
            Monitoring
          </button>
        </div>
      </nav>

      {/* Main Content */}
      <main className="px-6 py-8">
        {activeTab === 'projects' && <ProjectsView />}
        {activeTab === 'models' && <ModelsView />}
        {activeTab === 'monitoring' && <MonitoringView />}
      </main>

      {/* Modals */}
      {showDeployModal && <DeployModelModal />}
      {showNewProjectWizard && <NewProjectWizard />}
    </div>
  );
}
