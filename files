name: Download JSON Attachments from Comments

on:
  issue_comment:
    types: [created]

jobs:
  download-json:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          pip install requests
      
      - name: Download JSON attachments
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMMENT_BODY: ${{ github.event.comment.body }}
          COMMENT_ID: ${{ github.event.comment.id }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          REPO_FULL_NAME: ${{ github.repository }}
        run: |
          python - <<'EOF'
          import os
          import requests
          import re
          import json

          # Get environment variables
          GITHUB_TOKEN = os.environ['GITHUB_TOKEN']
          COMMENT_BODY = os.environ['COMMENT_BODY']
          COMMENT_ID = os.environ['COMMENT_ID']
          ISSUE_NUMBER = os.environ['ISSUE_NUMBER']
          REPO_FULL_NAME = os.environ['REPO_FULL_NAME']

          # Create downloads directory
          os.makedirs('downloads', exist_ok=True)

          print(f"Processing comment ID: {COMMENT_ID} from issue #{ISSUE_NUMBER}")
          print(f"Comment body:\n{COMMENT_BODY}\n")

          # Setup authenticated session
          session = requests.Session()
          session.headers.update({
              'Authorization': f'token {GITHUB_TOKEN}',
              'Accept': 'application/vnd.github.v3+json',
              'User-Agent': 'GitHub-Actions'
          })

          # Regex to find GitHub file URLs (specifically JSON files)
          url_pattern = r'https://github\.com/[^/]+/[^/]+/files/\d+/[^\s\)>]+\.json'
          
          # Also find all GitHub file URLs in case they're JSON but without extension
          all_files_pattern = r'https://github\.com/[^/]+/[^/]+/files/\d+/[^\s\)>]+'

          # Find JSON file URLs
          json_urls = re.findall(url_pattern, COMMENT_BODY)
          all_urls = re.findall(all_files_pattern, COMMENT_BODY)

          print(f"Found {len(json_urls)} JSON file(s) with .json extension")
          print(f"Found {len(all_urls)} total attachment(s)")

          downloaded_files = []

          # Download files
          for url in all_urls:
              filename = url.split('/')[-1]
              filepath = os.path.join('downloads', filename)
              
              print(f"\nDownloading: {url}")
              
              try:
                  response = session.get(url, allow_redirects=True, timeout=30)
                  
                  if response.status_code == 200:
                      # Save the file
                      with open(filepath, 'wb') as f:
                          f.write(response.content)
                      
                      # Try to parse as JSON to validate
                      try:
                          json_content = json.loads(response.content)
                          print(f"✓ Downloaded and validated JSON: {filename}")
                          print(f"  JSON keys: {list(json_content.keys())}")
                          downloaded_files.append(filepath)
                      except json.JSONDecodeError:
                          if filename.endswith('.json'):
                              print(f"⚠ Downloaded {filename} but it's not valid JSON")
                          else:
                              print(f"✓ Downloaded: {filename} (not JSON)")
                  else:
                      print(f"✗ Failed to download {filename}: Status {response.status_code}")
                      
              except Exception as e:
                  print(f"✗ Error downloading {filename}: {str(e)}")

          # Save metadata
          metadata = {
              'comment_id': COMMENT_ID,
              'issue_number': ISSUE_NUMBER,
              'repository': REPO_FULL_NAME,
              'downloaded_files': downloaded_files,
              'total_files': len(downloaded_files)
          }

          with open('downloads/metadata.json', 'w') as f:
              json.dump(metadata, f, indent=2)

          print(f"\n{'='*50}")
          print(f"Download complete! Total files: {len(downloaded_files)}")
          print(f"Metadata saved to: downloads/metadata.json")
          
          EOF
      
      - name: Upload JSON artifacts
        uses: actions/upload-artifact@v3
        with:
          name: json-attachments-issue-${{ github.event.issue.number }}
          path: downloads/
      
      - name: Comment on issue with results
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            let message = '✅ **JSON attachments processed**\n\n';
            
            if (fs.existsSync('downloads/metadata.json')) {
              const metadata = JSON.parse(fs.readFileSync('downloads/metadata.json', 'utf8'));
              message += `- **Files downloaded:** ${metadata.total_files}\n`;
              message += `- **Run:** [View workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n`;
              
              if (metadata.downloaded_files.length > 0) {
                message += '\n**Downloaded files:**\n';
                metadata.downloaded_files.forEach(file => {
                  const filename = file.split('/').pop();
                  message += `- \`${filename}\`\n`;
                });
              }
            }
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
