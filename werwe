# Advanced GitHub Issue Form Collapsible Sections

## üéØ Key Techniques

### 1. **Basic HTML Details/Summary**
```yaml
- type: markdown
  attributes:
    value: |
      <details>
      <summary>Click to expand section</summary>
      
      Content goes here
      
      </details>
```

### 2. **Open by Default**
```yaml
- type: markdown
  attributes:
    value: |
      <details open>
      <summary>This section starts expanded</summary>
      
      Content here is visible by default
      
      </details>
```

### 3. **Styled Headers with Emojis**
```yaml
- type: markdown
  attributes:
    value: |
      <details>
      <summary><h2>üîß Development Resources</h2></summary>
      
      **Instructions:** Only fill if you selected Development above
      
      </details>
```

### 4. **Nested Collapsible Sections**
```yaml
- type: markdown
  attributes:
    value: |
      <details>
      <summary><h2>üèóÔ∏è Infrastructure Configuration</h2></summary>
      
      <details>
      <summary><strong>üíæ Compute Resources</strong></summary>
      
      CPU, Memory, GPU requirements
      
      </details>
      
      <details>
      <summary><strong>üóÑÔ∏è Storage Requirements</strong></summary>
      
      Persistent volumes and storage classes
      
      </details>
      
      <details>
      <summary><strong>üåê Networking</strong></summary>
      
      Load balancers, ingress, service mesh
      
      </details>
      
      </details>
```

### 5. **Conditional Instructions**
```yaml
- type: markdown
  attributes:
    value: |
      <details>
      <summary>üìä <strong>JupyterHub Configuration</strong> (expand if selected above)</summary>
      
      > ‚ö†Ô∏è **Only fill this section if you checked "JupyterHub" in capabilities**
      
      ### Resource Requirements
      - How many concurrent users?
      - What libraries/packages needed?
      - GPU requirements for notebooks?
      
      ### Authentication
      - LDAP/AD integration needed?
      - Custom user groups?
      
      </details>
```

### 6. **Warning Boxes in Collapsible Sections**
```yaml
- type: markdown
  attributes:
    value: |
      <details>
      <summary>üö® <strong>Production Environment (UAT)</strong></summary>
      
      > **‚ö†Ô∏è WARNING**  
      > Production environments require additional approvals and security review.
      > Please allow extra time for provisioning.
      
      > **üìã REQUIRED**  
      > - Security officer approval  
      > - Compliance checklist completion  
      > - Production readiness review  
      
      </details>
```

### 7. **Tabular Data in Collapsible Sections**
```yaml
- type: markdown
  attributes:
    value: |
      <details>
      <summary>üìä <strong>Resource Planning Guide</strong></summary>
      
      | Workload Type | CPU | Memory | GPU |
      |---------------|-----|--------|-----|
      | Light Development | 2-4 cores | 4-8 Gi | None |
      | Data Processing | 4-8 cores | 16-32 Gi | Optional |
      | ML Training | 8+ cores | 32+ Gi | Required |
      | Production API | 2-4 cores | 8-16 Gi | None |
      
      </details>
```

### 8. **Code Blocks in Collapsible Sections**
```yaml
- type: markdown
  attributes:
    value: |
      <details>
      <summary>‚öôÔ∏è <strong>Example Configurations</strong></summary>
      
      ### Kubernetes Resource Limits
      ```yaml
      resources:
        requests:
          cpu: "2"
          memory: "4Gi"
        limits:
          cpu: "4"
          memory: "8Gi"
      ```
      
      ### Docker Compose Example
      ```yaml
      services:
        app:
          image: myapp:latest
          resources:
            limits:
              cpus: '2.0'
              memory: 4G
      ```
      
      </details>
```

### 9. **Multi-level Conditional Sections**
```yaml
- type: markdown
  attributes:
    value: |
      <details>
      <summary>ü§ñ <strong>Model Serving Configuration</strong></summary>
      
      <details>
      <summary>üîß <strong>Runtime Selection</strong></summary>
      
      Choose based on your model framework:
      - **TensorFlow**: Use TensorFlow Serving
      - **PyTorch**: Use TorchServe  
      - **ONNX**: Use NVIDIA Triton
      - **Multiple**: Use Seldon Core or KServe
      
      </details>
      
      <details>
      <summary>‚ö° <strong>Performance Requirements</strong></summary>
      
      | Metric | Low | Medium | High |
      |--------|-----|--------|------|
      | RPS | <10 | 10-100 | 100+ |
      | Latency | >1s | 100ms-1s | <100ms |
      | Models | 1-2 | 3-10 | 10+ |
      
      </details>
      
      </details>
```

### 10. **Progress Indicators**
```yaml
- type: markdown
  attributes:
    value: |
      <details>
      <summary>üìà <strong>Request Progress Tracking</strong></summary>
      
      ### Typical Timeline
      
      - [ ] **Day 0**: Request submitted
      - [ ] **Day 1-2**: Initial review and validation  
      - [ ] **Day 3-5**: Resource allocation and approval
      - [ ] **Day 6-7**: Environment provisioning
      - [ ] **Day 8-10**: Access configuration and testing
      - [ ] **Day 11-14**: Documentation and handoff
      
      **Total Time: 2 weeks for standard requests**
      
      </details>
```

## üé® Styling Tips

### Bold Summary Text
```html
<summary><strong>Section Title</strong></summary>
```

### Emoji Icons for Visual Hierarchy
```html
<summary>üîß <strong>Development</strong></summary>
<summary>üß™ <strong>Testing</strong></summary>
<summary>üöÄ <strong>Production</strong></summary>
```

### Combine with Blockquotes for Emphasis
```html
<details>
<summary>Important Section</summary>

> **Note:** This is important information
> that users should pay attention to.

</details>
```

## üö´ Limitations to Know

1. **No JavaScript**: Can't dynamically show/hide form fields
2. **Limited Styling**: Basic HTML and markdown only
3. **No Validation**: Can't require fields within collapsed sections
4. **Mobile Experience**: Collapsible sections work but may be less intuitive

## ‚úÖ Best Practices

1. **Clear Instructions**: Always indicate which sections to expand
2. **Default States**: Use `open` attribute for important sections
3. **Visual Hierarchy**: Use emojis and formatting consistently
4. **User Guidance**: Provide examples and help text
5. **Logical Grouping**: Group related fields together
6. **Fallback Content**: Assume some users won't expand sections

This approach gives users a cleaner, more organized form while keeping all the conditional logic clear through instructions and visual cues!
