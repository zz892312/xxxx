name: Process Onboarding Approval

on:
  issue_comment:
    types: [created]

permissions:
  issues: write
  contents: read

jobs:
  check-approval:
    runs-on: ubuntu-latest
    if: |
      contains(github.event.issue.labels.*.name, 'onboarding') &&
      contains(github.event.issue.labels.*.name, 'pending-approval') &&
      (contains(github.event.comment.body, '/approve') || contains(github.event.comment.body, '/APPROVE'))
    
    steps:
      - name: Check if commenter is authorized
        id: check_auth
        uses: actions/github-script@v7
        with:
          script: |
            // List of authorized approvers (GitHub usernames)
            const authorizedApprovers = ['team-lead', 'admin1', 'admin2'];
            const commenter = context.payload.comment.user.login;
            
            if (!authorizedApprovers.includes(commenter)) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `@${commenter} You are not authorized to approve onboarding requests. Please contact an administrator.`
              });
              core.setFailed('Unauthorized approver');
              return false;
            }
            return true;

      - name: Parse issue body
        id: parse
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const body = issue.body;
            
            // Parse the issue form data
            const appCodeMatch = body.match(/### Application Code\s*\n\s*(.+)/);
            const appNameMatch = body.match(/### Application Name\s*\n\s*(.+)/);
            const requesterMatch = body.match(/### Requester Name\s*\n\s*(.+)/);
            const emailMatch = body.match(/### Requester Email\s*\n\s*(.+)/);
            const priorityMatch = body.match(/### Priority\s*\n\s*(.+)/);
            
            // Parse compatibilities checkboxes
            const compatibilities = [];
            if (body.includes('- [x] ADT') || body.includes('- [X] ADT')) {
              compatibilities.push('ADT');
            }
            if (body.includes('- [x] Jupyter') || body.includes('- [X] Jupyter')) {
              compatibilities.push('Jupyter');
            }
            if (body.includes('- [x] Airflow') || body.includes('- [X] Airflow')) {
              compatibilities.push('Airflow');
            }
            
            const data = {
              appCode: appCodeMatch ? appCodeMatch[1].trim() : '',
              appName: appNameMatch ? appNameMatch[1].trim() : '',
              requester: requesterMatch ? requesterMatch[1].trim() : '',
              email: emailMatch ? emailMatch[1].trim() : '',
              priority: priorityMatch ? priorityMatch[1].trim() : 'Medium',
              compatibilities: compatibilities
            };
            
            core.setOutput('app_code', data.appCode);
            core.setOutput('app_name', data.appName);
            core.setOutput('requester', data.requester);
            core.setOutput('email', data.email);
            core.setOutput('priority', data.priority);
            core.setOutput('compatibilities', JSON.stringify(data.compatibilities));
            
            return data;

      - name: Update main issue with approval
        uses: actions/github-script@v7
        with:
          script: |
            // Remove pending-approval label and add approved
            await github.rest.issues.removeLabel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              name: 'pending-approval'
            });
            
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['approved', 'in-progress']
            });
            
            // Add approval comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `‚úÖ **Onboarding request approved by @${context.payload.comment.user.login}**\n\nCreating sub-issues for selected compatibilities...`
            });

      - name: Trigger sub-issue creation
        uses: actions/github-script@v7
        env:
          APP_CODE: ${{ steps.parse.outputs.app_code }}
          APP_NAME: ${{ steps.parse.outputs.app_name }}
          REQUESTER: ${{ steps.parse.outputs.requester }}
          EMAIL: ${{ steps.parse.outputs.email }}
          PRIORITY: ${{ steps.parse.outputs.priority }}
          COMPATIBILITIES: ${{ steps.parse.outputs.compatibilities }}
        with:
          script: |
            const compatibilities = JSON.parse(process.env.COMPATIBILITIES);
            const appCode = process.env.APP_CODE;
            const appName = process.env.APP_NAME;
            const requester = process.env.REQUESTER;
            const priority = process.env.PRIORITY;
            const mainIssueNumber = context.issue.number;
            
            const subIssues = [];
            const todoLabels = [];
            
            // Create sub-issues for each compatibility
            for (const compat of compatibilities) {
              const issueTitle = `[${appCode}] ${compat} Integration`;
              const issueBody = `## ${compat} Integration for ${appName}
              
**Parent Issue:** #${mainIssueNumber}
**Application Code:** ${appCode}
**Application Name:** ${appName}
**Requester:** ${requester}
**Priority:** ${priority}

### Tasks
- [ ] Review ${compat} compatibility requirements
- [ ] Setup ${compat} environment
- [ ] Configure ${compat} integration
- [ ] Test ${compat} functionality
- [ ] Document ${compat} setup
- [ ] Validate with requester

### Notes
This sub-issue tracks the ${compat} integration for the onboarding request.
Please update the parent issue #${mainIssueNumber} when completed.`;

              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody,
                labels: ['sub-issue', `compat-${compat.toLowerCase()}`, priority.toLowerCase()],
                assignees: []
              });
              
              subIssues.push({
                number: issue.data.number,
                title: issueTitle,
                url: issue.data.html_url,
                compat: compat
              });
              
              todoLabels.push(`todo-${compat.toLowerCase()}`);
            }
            
            // Add TODO labels to main issue
            if (todoLabels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: mainIssueNumber,
                labels: todoLabels
              });
            }
            
            // Update main issue with sub-issue links
            let comment = '## üìã Sub-Issues Created\n\n';
            comment += 'The following sub-issues have been created for compatibility integrations:\n\n';
            
            for (const subIssue of subIssues) {
              comment += `- [ ] **${subIssue.compat}**: #${subIssue.number}\n`;
            }
            
            comment += '\n---\n';
            comment += '‚úÖ Check off items above as they are completed.\n';
            comment += 'üè∑Ô∏è TODO labels have been added to track progress.';
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: mainIssueNumber,
              body: comment
            });
            
            core.setOutput('sub_issues', JSON.stringify(subIssues));

      - name: Send notifications
        uses: actions/github-script@v7
        env:
          REQUESTER_EMAIL: ${{ steps.parse.outputs.email }}
          APP_NAME: ${{ steps.parse.outputs.app_name }}
        with:
          script: |
            const requesterEmail = process.env.REQUESTER_EMAIL;
            const appName = process.env.APP_NAME;
            const issueUrl = context.payload.issue.html_url;
            
            // Create notification comment mentioning the requester
            const notificationBody = `üîî **Notification**

@${context.payload.issue.user.login} Your onboarding request for **${appName}** has been approved!

**Next Steps:**
- Sub-issues have been created for each selected compatibility
- You can track progress on this issue
- You will be notified when each sub-issue is completed

**Issue URL:** ${issueUrl}

---
*Note: Email notification would be sent to ${requesterEmail}*`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: notificationBody
            });
            
            // In a real implementation, you would integrate with your email service here
            // For example, using SendGrid, AWS SES, or GitHub's notification system
            console.log(`Would send email to: ${requesterEmail}`);
            console.log(`Subject: Onboarding Request Approved - ${appName}`);
            console.log(`Issue: ${issueUrl}`);
